import { Command } from "commander"
import packageInfo from "./package.json"
import fs from "fs";
import { homedir } from "os";
import { execSync } from "child_process";
import readLine from "readline-sync";


const ZSHRC_PATH = `${homedir}/.zshrc`
const ALIASES_PATH = `${homedir}/.aliases`

const DATE = new Date()
const DAY = DATE.getDate()
const MONTH = DATE.getMonth()
const YEAR = DATE.getFullYear()
const HOUR = DATE.getHours()
const MINUTE = DATE.getMinutes()
const SECONDS = DATE.getSeconds()
const NOW = `${DAY}-${MONTH}-${YEAR}_${HOUR}-${MINUTE}-${SECONDS}`

const app = new Command()
app
  .name('add-alias')
  .description('CLI add alias on .zshrc')
  .version(packageInfo.version)
  .requiredOption('-n, --name <string>', 'name of alias')
  .requiredOption('-c, --command <string>', 'command for said alias')
  .option('-p, --preview', 'if option is used the changes not be write on the .zshrc file', false)

app.parse()

const flags = app.opts()
const preview = !!flags.preview
const name = flags.name
const command = flags.command

!name || !command && app.help()

const bkpDir = `${homedir}/bkp-zshrc`
const bkpDirExists = fs.existsSync(bkpDir)
!bkpDirExists && fs.mkdirSync(bkpDir)

try {
  fs.copyFileSync(ZSHRC_PATH, `${bkpDir}/zshrc_${NOW}`)
} catch (error) {
  error instanceof Error && app.error(error.message)
}

try {
  const zshrcContent = fs.readFileSync(ZSHRC_PATH).toLocaleString()
  const header = '# BEGIN - GENERATED BY ADD-ALIAS CLI'
  const content = 'source $HOME/.aliases'
  !zshrcContent.includes(header) && fs.appendFileSync(ZSHRC_PATH, `\n${header}`)
  !zshrcContent.includes(content) && fs.appendFileSync(ZSHRC_PATH, `\n${content}`)
} catch (error) {
  error instanceof Error && app.error(error.message)
}

try {
  const alias = `alias ${name}="${command}"`
  const aliasesContent = fs.readFileSync(ALIASES_PATH).toLocaleString()

  execSync(`sed -i '/^$/d' ${ALIASES_PATH}`)
  if (aliasesContent.includes(`alias ${name}`, 1)) {
    !readLine.keyInYN('This alias already exists. Do you want to update?') && app.exitOverride()
    execSync(`sed -i '/^alias ${name}=/d' ${ALIASES_PATH}`)
  }

  fs.appendFileSync(ALIASES_PATH, `${alias}`)
  execSync(alias)
} catch (error) {
  error instanceof Error && app.error(error.message)
}
